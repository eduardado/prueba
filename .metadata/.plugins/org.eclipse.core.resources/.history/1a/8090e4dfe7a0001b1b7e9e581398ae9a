package com.comerzzia.bookerzzia.backoffice.services.lenguajes;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.comerzzia.bookerzzia.backoffice.persistence.lenguajes.Lenguaje;
import com.comerzzia.bookerzzia.backoffice.persistence.lenguajes.LenguajeExample;
import com.comerzzia.bookerzzia.backoffice.persistence.lenguajes.LenguajeKey;
import com.comerzzia.bookerzzia.backoffice.persistence.lenguajes.LenguajeExample.Criteria;
import com.comerzzia.bookerzzia.backoffice.persistence.lenguajes.LenguajeMapper;
import com.comerzzia.core.servicios.sesion.DatosSesionBean;
import com.comerzzia.core.servicios.sesion.IDatosSesion;
import com.comerzzia.core.util.paginacion.PaginaResultados;

import jxl.common.Logger;

@Service
public class LenguajeServiceImpl implements LenguajeService {

	protected static Logger log = Logger.getLogger(LenguajeServiceImpl.class);

	@Autowired
	LenguajeMapper lenguajeMapper;

	// TODO qué es esta clase?? ParametrosBuscarLenguajesBean
	@Override
	public PaginaResultados consultar(ParametrosBuscarLenguajesBean lenguajeParameters, IDatosSesion datosSesion) throws LenguajeException {
		log.debug("consultar() - Consultando lenguajes");

		LenguajeExample lenguajeExample = new LenguajeExample();

		// para construir los where con mybatis usamos la clase Criteria que es una clase estática
		// que crea Mybatis con cada modelo en la parte Example
		// or() == createCriteria()
		// importar Criteria del modelo
		Criteria criteria = lenguajeExample.or().andUidInstanciaEqualTo(datosSesion.getUidInstancia());

		// CODLENGUA

		if (StringUtils.isNotBlank(lenguajeParameters.getCodLengua())) {
			criteria.andCodlenguaLikeInsensitive("%" + lenguajeParameters.getCodLengua() + "%");
		}

		// DESLENGUA
		if (StringUtils.isNotBlank(lenguajeParameters.getDesLengua())) {
			criteria.andCodlenguaLikeInsensitive("%" + lenguajeParameters.getDesLengua() + "%");
		}

		lenguajeExample.setOrderByClause(lenguajeParameters.getOrden());
		if (lenguajeParameters.getNumPagina() == 0) {
			lenguajeParameters.setNumPagina(1);
		}

		// array que contiene objetos Lenguaje, el tamaño del array es el tamaño de la página
		// que es lo mismo que el número de resultados por página
		List<Lenguaje> resultados = new ArrayList<Lenguaje>(lenguajeParameters.getTamañoPagina());

		// PaginaResultados usa la clase anterior (resultados por página) y además
		// una clase con los atributos de Lenguaje + atributos tamañoPagina, numPagina y orden
		PaginaResultados paginaResultados = new PaginaResultados(lenguajeParameters, resultados);

		// todos los lenguajes
		List<Lenguaje> lenguajes = lenguajeMapper.selectByExample(lenguajeExample);

		// no sé cómo funciona esto pero creo que setea los índices en función del nº de lenguajes que hay
		Integer fromIndex = paginaResultados.getInicio() - 1;
		Integer toIndex = paginaResultados.getInicio() + paginaResultados.getTamañoPagina() - 1;
		if (toIndex > lenguajes.size()) {
			toIndex = lenguajes.size();
		}

		// añade, a los resultados una sublista, dependiendo de cómo se hayan seteado los índices.
		resultados.addAll(lenguajes.subList(fromIndex, toIndex));

		// el componente JSP utiliza esta clase para mostrar los resultados
		paginaResultados.setTotalResultados(lenguajes.size());
		return paginaResultados;
	}

	// consulta por clave primaria
	@Override
	public Lenguaje consultar(String codLengua, IDatosSesion datosSession) throws LenguajeNotFoundException, LenguajeException {

		log.debug("consultar() - consultando lenguaje con código: " + codLengua);

		try {
			// se crea el objeto que representa la clave primaria
			LenguajeKey lenguajeKey = new LenguajeKey();
			lenguajeKey.setUidInstancia(datosSession.getUidInstancia());
			lenguajeKey.setCodlengua(codLengua);

			// se hace la consulta usando el mapper y se le pasa el objeto-clave primaria
			Lenguaje lenguaje = lenguajeMapper.selectByPrimaryKey(lenguajeKey);

			// control de errores
			if (lenguaje == null) {
				String msg = "No se ha encontrado el lenguaje";
				log.info("consultar() - " + msg);
				throw new LenguajeNotFoundException(msg);
			}

			return lenguaje;
		}
		catch (LenguajeNotFoundException e) {
			throw e;
		}
		catch (Exception e) { 
			String msg = "Ha ocurrido un error consultando el lenguaje";
			log.error(msg + ": " + e.getMessage());
			
//			throw new LenguajeException(msg, e);
		}

	}

	@Override
	public void salvar(String codLengua, IDatosSesion datosSession) throws LenguajeException {

	}

	@Override
	public void crear(String codLengua, IDatosSesion datosSession) throws LenguajeException {
		// TODO Auto-generated method stub

	}

	@Override
	public void modificar(String codLengua, IDatosSesion datosSession) throws LenguajeException {
		// TODO Auto-generated method stub

	}

	@Override
	public void eliminar(String codLengua, IDatosSesion idDatosSesion) throws LenguajeException {
		// TODO Auto-generated method stub

	}

}
